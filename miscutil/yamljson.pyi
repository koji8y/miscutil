import json
from miscutil import none_or as none_or
from typing import Any, Dict, List, Optional, Tuple
from unittest import TestCase

KEY_NAME_FOR_TYPE: str

def json_obj2yaml_str(in_json_obj: Any, sort_keys: bool=...) -> str: ...
def json2yaml(in_json: str, sort_keys: bool=...) -> str: ...
def json2yaml_lines(in_json: str, sort_keys: bool=...) -> List[str]: ...
def to_json_using_slot(self, attr_names: List[str]=...) -> Dict[str, Any]: ...

class JSONEncoder(json.JSONEncoder):
    other_encoder: Any = ...
    show_type: Any = ...
    show_zero_value: Any = ...
    def __init__(self, *, skipkeys: Any=..., ensure_ascii: Any=..., check_circular: Any=..., allow_nan: Any=..., sort_keys: Any=..., indent: Any=..., separators: Any=..., default: Any=..., other_encoder: Any=..., show_type: bool=..., show_zero_value: bool=...) -> None: ...
    def default(self, target: Any) -> Any: ...
    @staticmethod
    def treat_primitive(obj: Any) -> Tuple[bool, Any]: ...
    def to_json(self, obj: Any) -> Dict[str, Any]: ...
    def to_yaml_str(self, obj: Any) -> str: ...
    def to_yaml_lines(self, obj: Any) -> List[str]: ...
    def assertJsonEqualAsYaml(self, testCase: TestCase, practical: Any, expected: Any, memo: Optional[str]=...) -> None: ...

def to_yaml_str(obj: Any, show_type: bool=..., show_zero_value: bool=...) -> str: ...
def print_as_yaml_str(obj: Any, show_type: bool=..., show_zero_value: bool=...) -> None: ...
def obj_to_json(obj: Any, show_type: bool=..., show_zero_value: bool=...) -> Any: ...
